// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

import "@openzeppelin/contracts@4.4.2/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts@4.4.2/access/Ownable.sol";
import "@openzeppelin/contracts@4.4.2/utils/Counters.sol";

contract MyToken is ERC721, Ownable {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;
    string public baseURI = "https://ipfs.io/ipfs/bafkreiftkuhgjqim2jxzxu3lx5mehwf4uvc6kshpzkcqsdcbxzwmliwlee";
    bool public revealed = false; 
    constructor() ERC721("MyToken", "MTK") {}

    function _baseURI() internal view override returns (string memory) {
        return baseURI;
    }

    function changebaseURI(string memory baseURI_) public onlyOwner {
        baseURI = baseURI_; 
    }
    function changeRevealed(bool _revealed) public onlyOwner {
        revealed = _revealed;

    }
    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId + 1);
    }

    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query token doe's not exist");

        string memory baseURI_ = _baseURI();

        if (revealed) {
            return bytes(baseURI_).length > 0 ? string(abi.encodePacked(baseURI_, Strings.toString(tokenId), ".json")) : "";
        } else {
            return string(abi.encodePacked(baseURI_, "hidden.json"));
        }
    }
}
